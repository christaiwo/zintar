/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LandingRouteImport } from './routes/landing'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TestIndexRouteImport } from './routes/test/index'
import { Route as TemplatesIndexRouteImport } from './routes/templates/index'
import { Route as SettingsIndexRouteImport } from './routes/settings/index'
import { Route as ProposalsIndexRouteImport } from './routes/proposals/index'
import { Route as JobsIndexRouteImport } from './routes/jobs/index'

const LandingRoute = LandingRouteImport.update({
  id: '/landing',
  path: '/landing',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TestIndexRoute = TestIndexRouteImport.update({
  id: '/test/',
  path: '/test/',
  getParentRoute: () => rootRouteImport,
} as any)
const TemplatesIndexRoute = TemplatesIndexRouteImport.update({
  id: '/templates/',
  path: '/templates/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsIndexRoute = SettingsIndexRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProposalsIndexRoute = ProposalsIndexRouteImport.update({
  id: '/proposals/',
  path: '/proposals/',
  getParentRoute: () => rootRouteImport,
} as any)
const JobsIndexRoute = JobsIndexRouteImport.update({
  id: '/jobs/',
  path: '/jobs/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/landing': typeof LandingRoute
  '/jobs': typeof JobsIndexRoute
  '/proposals': typeof ProposalsIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/templates': typeof TemplatesIndexRoute
  '/test': typeof TestIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/landing': typeof LandingRoute
  '/jobs': typeof JobsIndexRoute
  '/proposals': typeof ProposalsIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/templates': typeof TemplatesIndexRoute
  '/test': typeof TestIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/landing': typeof LandingRoute
  '/jobs/': typeof JobsIndexRoute
  '/proposals/': typeof ProposalsIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/templates/': typeof TemplatesIndexRoute
  '/test/': typeof TestIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/landing'
    | '/jobs'
    | '/proposals'
    | '/settings'
    | '/templates'
    | '/test'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/landing'
    | '/jobs'
    | '/proposals'
    | '/settings'
    | '/templates'
    | '/test'
  id:
    | '__root__'
    | '/'
    | '/landing'
    | '/jobs/'
    | '/proposals/'
    | '/settings/'
    | '/templates/'
    | '/test/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LandingRoute: typeof LandingRoute
  JobsIndexRoute: typeof JobsIndexRoute
  ProposalsIndexRoute: typeof ProposalsIndexRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
  TemplatesIndexRoute: typeof TemplatesIndexRoute
  TestIndexRoute: typeof TestIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/landing': {
      id: '/landing'
      path: '/landing'
      fullPath: '/landing'
      preLoaderRoute: typeof LandingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/test/': {
      id: '/test/'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/templates/': {
      id: '/templates/'
      path: '/templates'
      fullPath: '/templates'
      preLoaderRoute: typeof TemplatesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/proposals/': {
      id: '/proposals/'
      path: '/proposals'
      fullPath: '/proposals'
      preLoaderRoute: typeof ProposalsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/jobs/': {
      id: '/jobs/'
      path: '/jobs'
      fullPath: '/jobs'
      preLoaderRoute: typeof JobsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LandingRoute: LandingRoute,
  JobsIndexRoute: JobsIndexRoute,
  ProposalsIndexRoute: ProposalsIndexRoute,
  SettingsIndexRoute: SettingsIndexRoute,
  TemplatesIndexRoute: TemplatesIndexRoute,
  TestIndexRoute: TestIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
